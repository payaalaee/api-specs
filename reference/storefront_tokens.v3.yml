openapi: 3.0.1
info:
  title: Storefront Token
  description: |-
    Get and manage tokens used to authenticate cross-origin requests to the [GraphQL Storefront API](/api-docs/storefront/graphql/graphql-storefront-api-overview).

    ## Authentication

    Authenticate requests by including an [OAuth](/api-docs/getting-started/authentication/rest-api-authentication) `access_token` in the request header.

    ```http
    GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels
    Content-Type: application/json
    X-Auth-Token: {{ACCESS_TOKEN}}
    ```

    ### [OAuth scopes](/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes)

    | UI Name                                      | Permission | Parameter                                     |
    |----------------------------------------------|------------|-----------------------------------------------|
    | Storefront API Customer Impersonation Tokens | manage     | `store_storefront_api_customer_impersonation` |
    | Storefront API Tokens                        | manage     | `store_storefront_api`                        |

    ## [API tokens](/api-reference/cart-checkout/storefront-api-token/api-token/createtoken)

    Generate tokens (JWT) for authenticating cross-origin requests to the [GraphQL Storefront API](/api-docs/storefront/graphql/graphql-storefront-api-overview). To [create a token](/api-reference/cart-checkout/storefront-api-token/api-token/createtoken), send a `POST` request to `/stores/{{STORE_HASH}}/v3/storefront/api-token`.

    ```http
    POST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/storefront/api-token
    X-Auth-Token: {{ACCESS_TOKEN}}
    Content-Type: application/json
    Accept: application/json

    {
      "channel_id": 1,
      "expires_at": 1602288000,
      "allowed_cors_origins": 
        ["https://store.example.com"]
      
    }
    ```

    |Property|Type|Description|
    |-|-|-|
    |`channel_id`|int| Must be a valid channel ID on the store (required) |
    |`expires_at`|int| Unix timestamp (required) |
    |`allowed_cors_origins`|array[str]| Allowed origins for cross origin requests (required) |

    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/cart-checkout/storefront-api-token/api-token/createtoken#requestrunner)



    [**Response:**](/api-reference/cart-checkout/storefront-api-token/api-token/createtoken#responses)

    ```json
    {
      "token":"...eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9...",
      "meta": {
        // ...
      }
    }
    ```



    ## [Customer impersonation tokens](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation)

    Generate tokens for use in server-to-server requests to the [GraphQL Storefront API](/api-docs/storefront/graphql/graphql-storefront-api-overview#customer-impersonation-tokens). To [create a customer impersonation token](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation), send a `POST` request to `/v3/storefront/api-token-customer-impersonation`.

    ```http
    POST https://api.bigcommerce.com/stores/{STORE_HASH}/v3/storefront/api-token-customer-impersonation
    x-Auth-Token: {{ACCESS_TOKEN}}
    ```

    [**Response:**](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation#responses)

    ```json
    {
      "data":
      {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      }
      "meta": {}
    }
    ```

    Customer impersonation token authenticated requests made to the GraphQL API receive store information from the perspective of the customer with the ID specified in the `X-Bc-Customer-Id` header sent with the GraphQL `POST` request. Pricing, product availability, customer account, and customer details will be reflected. Consider this sample request using a [customer impersonation token](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation) to run a request in the context of customer ID `123`.

    ```http
    POST https://store.example.com/graphql
    Authorization: Bearer {{CUSTOMER_IMPERSONATION_TOKEN}}
    X-Bc-Customer-Id: 123

    {
        "query": "query CustomerInformation {\n  customer {\n    firstName\n    lastName\n    email\n  }\n}"
    }
    ```


    <!-- theme: warning -->
    > #### Note
    > * Customer impersonation tokens should **never** be exposed publicly, for example, to JavaScript or HTML. These tokens should not be used for frontend requests.
    > * Unlike normal GraphQL API tokens, they are sensitive and should be treated like secrets, just as you might treat an OAuth token.
    > * Attempts to run requests using these tokens from a web browser will be rejected.


    ## [Revoking tokens](/api-reference/store-management/tokens/api-token/revoketoken)
    To [revoke a token](/api-reference/store-management/tokens/api-token/revoketoken), send a `DELETE` request to `/v3/storefront/api-token`.

    ```http
    DELETE /stores/{{STORE_HASH}}/v3/storefront/api-token-customer-impersonation
    host: api.bigcommerce.com
    x-Auth-Token: {{ACCESS_TOKEN}}
    Sf-Api-Token: {{CUSTOMER_ID}}
    ```

    ## Additional information

    * [GraphQL API Overview](/api-docs/storefront/graphql/graphql-storefront-api-overview)
  termsOfService: ''
  version: ''
servers:
  - url: 'https://api.bigcommerce.com'
security:
  - X-Auth-Token: []
tags:
  - name: API Token
  - name: Customer Impersonation Token
paths:
  '/stores/{store_hash}/v3/storefront/api-token':
    post:
      tags:
        - API Token
      summary: Create a Token
      description: |-
        Creates a Storefront API token.

        **Required Scopes**
        * `Manage` `Storefront API Tokens`
      operationId: createToken
      parameters:
        - name: store_hash
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TokenPostSimple'
                - $ref: '#/components/schemas/TokenPostImpersonation'
        required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token_Full'
        '401':
          description: Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.
          content: {}
        '403':
          description: Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.
          content: {}
        '422':
          description: Invalid JSON request body - missing or invalid data.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - API Token
      summary: Revoke a Token
      description: Revoke access for a Storefront API token. Only revoke compromised tokens under emergency situations. Let uncompromised short-lived tokens expire naturally, as you do not need to revoke these.
      operationId: revokeToken
      parameters:
        - name: store_hash
          in: path
          required: true
          schema:
            type: string
        - name: Sf-Api-Token
          in: header
          description: An existing JWT token that you want to revoke.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A storefront API token revocation has been scheduled.
          content: {}
        '401':
          description: Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.
          content: {}
        '403':
          description: Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.
          content: {}
        '422':
          description: Invalid JWT Token provided or missing JWT token header
          content: {}
  '/stores/{store_hash}/v3/storefront/api-token-customer-impersonation':
    post:
      tags:
        - Customer Impersonation Token
      summary: Create a Token
      description: |-
        Returns a Storefront API token that allows your application to impersonate customers when making GraphQL `POST` requests. For more information on how to use the returned token, see [customer impersonation tokens](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation).

        **Required Scopes**
        * `Manage` `Storefront API Customer Impersonation Tokens`
      operationId: createTokenWithCustomerImpersonation
      parameters:
        - name: store_hash
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPostImpersonation'
        required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token_Full'
        '401':
          description: Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.
          content: {}
        '403':
          description: Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.
          content: {}
        '422':
          description: Invalid JSON request body - missing or invalid data
          content: {}
components:
  schemas:
    TokenPostImpersonation:
      type: object
      x-internal: false
      x-examples: {}
      properties:
        channel_id:
          type: integer
          minimum: 1
          description: Channel ID for requested token
          example: 1
        expires_at:
          type: integer
          description: Unix timestamp (UTC time) defining when the token should expire.
          example: 1885635176
          minimum: 0
      required:
        - channel_id
        - expires_at
    TokenPostSimple:
      type: object
      properties:
        allowed_cors_origins:
          maxItems: 1
          minItems: 1
          type: array
          description: List of allowed domains for Cross-Origin Request Sharing. Currently only accepts a single element.
          items:
            maxLength: 1
            minLength: 1
            pattern: '/^https?:\/\/(?=.{1,254}(?::|$))(?:(?!\d|-)(?![a-z0-9\-]{1,62}-(?:\.|:|$))[a-z0-9\-]{1,63}\b(?!\.$)\.?)+(:\d+)?$/i;'
            type: string
      x-internal: false
      x-examples:
        example-1:
          allowed_cors_origins:
            - 'https://www.yourstorefront.com/'
    Token_Full:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Token_Base'
        meta:
          type: object
          properties: {}
      x-internal: false
    Token_Base:
      type: object
      properties:
        token:
          type: string
          description: JWT Token for accessing the Storefront API
      x-internal: false
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            errors:
              $ref: '#/components/schemas/DetailedErrors'
      x-internal: false
    BaseError:
      type: object
      properties:
        status:
          type: integer
          description: |
            The HTTP status code.
        title:
          type: string
          description: |
            The error title describing the particular error.
        type:
          type: string
      description: |
        Error payload for the BigCommerce API.
      x-internal: false
    DetailedErrors:
      type: object
      additionalProperties:
        type: string
      x-internal: false
  responses:
    TokenResponse:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token_Full'
  securitySchemes:
    X-Auth-Token:
      type: apiKey
      description: |-
        |Header|Parameter|Description|
        |-|-|-|
        |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|

        ```http
        GET /stores/{store_hash}/v3/catalog/summary
        host: api.bigcommerce.com
        Accept: application/json
        X-Auth-Token: {access_token}
        ```

        For more information on Authenticating BigCommerce APIs, see: [Authentication](/api-docs/getting-started/authentication)
      name: X-Auth-Token
      in: header
x-stoplight:
  docs:
    includeDownloadLink: true
    showModels: false
